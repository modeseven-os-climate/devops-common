---
name: "ðŸ§ª Test builds (Matrix)"

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches:
      - "*"
      - "!update-devops-tooling"

jobs:
  get-matrix-versions:
    runs-on: "ubuntu-latest"
    # Don't run when pull request is merged
    if: github.event.pull_request.merged == false
    outputs:
      pyversions: ${{ env.pyversions }}

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Run script: python-matrix-versions.sh"
        run: |
          pyversions=$(scripts/python-matrix-versions.sh double brackets)
          pyversions="[ $pyversions ]"
          echo "Matrix versions extracted from pyproject.toml: $pyversions"
          echo "matrix_versions=${pyversions}" >> "$GITHUB_OUTPUT"

  pre-release:
    needs: [get-matrix-versions]
    runs-on: "ubuntu-latest"
    continue-on-error: true
    # Don't run when pull request is merged
    if: github.event.pull_request.merged == false
    strategy:
      fail-fast: false
      matrix:
        # yamllint disable-line rule:line-length
        python-version: ["${{ needs.get-matrix-versions.outputs.pyversions }}"]

    steps:
      - name: "Populate environment variables"
        id: setenv
        run: |
          echo "Action triggered by user: ${GITHUB_TRIGGERING_ACTOR}"
          set -x
          datetime=$(date +'%Y%m%d%H%M')
          export datetime
          echo "datetime=${datetime}" >> "$GITHUB_OUTPUT"
          vernum="${{ matrix.python-version }}.${datetime}"
          echo "vernum=${vernum}" >> "$GITHUB_OUTPUT"

      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions

      - name: "Tag for test release"
        # Delete all local tags, then create a synthetic tag for testing
        # Use the date/time to avoid conflicts uploading to Test PyPI
        run: |
          scripts/dev-versioning.sh "${{ steps.setenv.outputs.vernum }}"
          git tag | xargs -L 1 | xargs git tag --delete
          git tag "v${{ steps.setenv.outputs.vernum }}"
          git checkout "tags/v${{ steps.setenv.outputs.vernum }}"
          grep version pyproject.toml

      - name: "Build with TOX"
        run: |
          tox -e build
